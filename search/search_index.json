{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Taller de C y Arduino para Euroavia Sevilla Se dividir\u00e1 en las siguientes secciones: Introducci\u00f3n Presentaci\u00f3n de las aplicaciones y herramientas que ser\u00e1n necesarias a lo largo del taller, asi como de los objetivos esperados Lenguaje C Breve introducci\u00f3n y nociones b\u00e1sicas de C, necesarias antes de adentrarse en Arduino Hardware Descripci\u00f3n y datos t\u00e9cnicos del hardware que se usar\u00e1 para el taller Arduino Introducci\u00f3n a Arduino y pr\u00e1cticas","title":"Home"},{"location":"#taller-de-c-y-arduino-para-euroavia-sevilla","text":"Se dividir\u00e1 en las siguientes secciones:","title":" Taller de C y Arduino para Euroavia Sevilla"},{"location":"#introduccion","text":"Presentaci\u00f3n de las aplicaciones y herramientas que ser\u00e1n necesarias a lo largo del taller, asi como de los objetivos esperados","title":"Introducci\u00f3n"},{"location":"#lenguaje-c","text":"Breve introducci\u00f3n y nociones b\u00e1sicas de C, necesarias antes de adentrarse en Arduino","title":"Lenguaje C"},{"location":"#hardware","text":"Descripci\u00f3n y datos t\u00e9cnicos del hardware que se usar\u00e1 para el taller","title":"Hardware"},{"location":"#arduino","text":"Introducci\u00f3n a Arduino y pr\u00e1cticas","title":"Arduino"},{"location":"arduino/","text":"Introducci\u00f3n a Arduino TBD Enlaces a cada pr\u00e1ctica: Practica 1 - TBD Practica 2 - TBD Practica 3 - TBD Practica 4 - TBD TBD","title":"Introducci\u00f3n a Arduino"},{"location":"arduino/#introduccion-a-arduino","text":"TBD Enlaces a cada pr\u00e1ctica: Practica 1 - TBD Practica 2 - TBD Practica 3 - TBD Practica 4 - TBD TBD","title":"Introducci\u00f3n a Arduino"},{"location":"arduino/practica-01/","text":"Pr\u00e1ctica 1 TBD","title":"Pr\u00e1ctica 1"},{"location":"arduino/practica-01/#practica-1","text":"TBD","title":"Pr\u00e1ctica 1"},{"location":"arduino/practica-02/","text":"Pr\u00e1ctica 2 - El bus I2C A medida que la capacidad integraci\u00f3n en un \u00fanico chip aumentaba, el n\u00famero de componentes comerciales disponibles, aumentaba exponencialmente. Cada vez era, y es, m\u00e1s sencillo fabricar bloques de construcci\u00f3n electr\u00f3nicos integrados en un \u00fanico chip, y pronto el grosor de los cat\u00e1logos de los fabricantes, engord\u00f3 peligrosamente. Era relativamente f\u00e1cil encontrar esos bloques de construcci\u00f3n pero cuando tu dise\u00f1o requer\u00eda usar una docena de esos bloques, ponerlos de acuerdo y conseguir que se comunicaran eficazmente, se convirti\u00f3 en un problema. Por eso, en los primeros 80, uno de los grandes fabricantes de electr\u00f3nica (Phillips), propuso una norma de comunicaci\u00f3n digital, entre los diferentes componentes de una sistema electr\u00f3nico. Una norma que especificaba la velocidad, niveles de tensi\u00f3n, y el protocolo a seguir para conseguir esa comunicaci\u00f3n y la hizo abierta. Esa norma se llam\u00f3 Inter Integrated Circuits bus, o IIC, y pronto se convirti\u00f3 en un est\u00e1ndar de facto en la industria. Las especificaciones han ido mejorando con los a\u00f1os, pero la idea b\u00e1sica sigue siendo la misma: Protocolo de dos hilos de control, uno para transmitir los datos, SDA y otro, el reloj as\u00edncrono que indica cuando leer los datos SCL. Mas GND y 5V (cuando se requiera). Cada dispositivo conectado al bus I2C y cada uno tiene su direcci\u00f3n exclusiva, de 7 bits, (Asi que, en teor\u00eda, podemos conectar 27 = 128, dispositivos). Uno de estos componentes, debe actuar como master, es decir controla el reloj. No se requiere una velocidad de reloj estricta, ya que es el master quien controla el Clock. Es multi master, el master puede cambiar, pero solo uno puede estar activo a la vez, y proporciona un protocolo de arbitraje y detecci\u00f3n de colisiones. (Si no has entendido esto, no te preocupes, todav\u00eda es pronto). Puedes encontrar que a este bus se le llama I2C, IIC o I2C, y tambi\u00e9n, como TWI (Two Wire Interface, o interface de 2 hilos), pero siempre es lo mismo. La idea es que todos los componentes se conecten en paralelo a las dos l\u00edneas del bus, SDA y SCL. En cada momento solo puede haber un master, en este caso, nuestro Arduino, y los dem\u00e1s se configuran como esclavos. Puede haber m\u00e1s de un master. La norma propone un sistema de arbitraje, para transferir el control de uno a otro, pero en un instante dado, solo uno puede ser el master. Atenci\u00f3n a las resistencias de Pullup conectadas a SDA y SCL. Son imperativas, ya que el bus es activo bajo (Esto es, la se\u00f1al activa es un 0, no un 1. Pero tranquilo, que esto no te afecta) Al conectar algo al bus I2C, es imprescindible que leas el manual para saber si los pullups los tienes que poner t\u00fa, o vienen puestos en el componente. En el caso del montaje entregado, ya existe una doble pull-up de 10 KOhm (y por lo tanto, resultante en 5K, por lo que en principio se deber\u00eda admitir hasta 400 kHz en el bus). Y la buena noticia es que nuestro Arduino lo soporta de f\u00e1brica con una librer\u00eda est\u00e1ndar, que utiliza dos de los pines anal\u00f3gicos para las funciones SDA (Datos) y SCL (Clock). En el Arduino UNO , los pines I2C est\u00e1n en los pines anal\u00f3gicos A4 (SDA) y A5 (SCL) En el Arduino Mega y DUE, son el 20 (SDA) y en el 21(SCL) En el WeMos D1 Mini entregado, son el 0 (SDA) y en el 2(SCL) La librer\u00eda I2C, en Arduino se llama Wire, y gestiona el protocolo de comunicaciones completo, lo que es un detalle, pues nos ahorra la parte de estudiar el protocolo y escribir programas para ello (maquina de estados a bajo nivel). Esto es una practica habitual y recomendada, construir sobre el trabajo de terceros. Es una de las muy grandes virtudes de la comunidad Arduino y open source. Hay una gama muy amplia de librerias que dan soporte a muchisimos dispositivos, o crean funcionalidades nuevas, \u2026 Se recomienda buscar, probar y sacar conclusiones para ver tanto la calidad como el posible uso. Se espera que tras este ejercicio se consiga comunicar con el sensor BME280 integrado en el montaje entregado. Programa Se parte de la anterior sesi\u00f3n, donde un programa enviaba por puerto serie 3 variables, para luego verlas o dibujarlas mediante el monitor serie o el plotter, respectivamente. NOTA : La documentaci\u00f3n oficial de la libreria Wire de Arduino puede encontrarse en https://www.arduino.cc/en/reference/wire NOTA : Toda la informaci\u00f3n de las librerias del ESP8266 para Ardu\u00edno pueden encontrarse en https://arduino-esp8266.readthedocs.io/en/latest/libraries.html NOTA : Toda la informaci\u00f3n referente al sensor BME280 que trataremos puede encontrarse en su datasheet en BME280.pdf Para poder comenzar con el uso de las funciones de I2C es necesario incluir la cabecera de la libreria Wire , al principio de nuestro programa, de la siguiente forma: #include <Wire.h> void setup() { // join i2c bus (address optional for master) Wire.begin(0, 2); // start serial for output Serial.begin(9600); } void loop() { // request 6 bytes from slave device #8 Wire.requestFrom(8, 6); // slave may send less than requested while (Wire.available()) { // receive a byte as character char c = Wire.read(); // print the character Serial.printf(\"Received: %02X\\n\", c); } delay(500); }","title":"Pr\u00e1ctica 2 - El bus I2C"},{"location":"arduino/practica-02/#practica-2-el-bus-i2c","text":"A medida que la capacidad integraci\u00f3n en un \u00fanico chip aumentaba, el n\u00famero de componentes comerciales disponibles, aumentaba exponencialmente. Cada vez era, y es, m\u00e1s sencillo fabricar bloques de construcci\u00f3n electr\u00f3nicos integrados en un \u00fanico chip, y pronto el grosor de los cat\u00e1logos de los fabricantes, engord\u00f3 peligrosamente. Era relativamente f\u00e1cil encontrar esos bloques de construcci\u00f3n pero cuando tu dise\u00f1o requer\u00eda usar una docena de esos bloques, ponerlos de acuerdo y conseguir que se comunicaran eficazmente, se convirti\u00f3 en un problema. Por eso, en los primeros 80, uno de los grandes fabricantes de electr\u00f3nica (Phillips), propuso una norma de comunicaci\u00f3n digital, entre los diferentes componentes de una sistema electr\u00f3nico. Una norma que especificaba la velocidad, niveles de tensi\u00f3n, y el protocolo a seguir para conseguir esa comunicaci\u00f3n y la hizo abierta. Esa norma se llam\u00f3 Inter Integrated Circuits bus, o IIC, y pronto se convirti\u00f3 en un est\u00e1ndar de facto en la industria. Las especificaciones han ido mejorando con los a\u00f1os, pero la idea b\u00e1sica sigue siendo la misma: Protocolo de dos hilos de control, uno para transmitir los datos, SDA y otro, el reloj as\u00edncrono que indica cuando leer los datos SCL. Mas GND y 5V (cuando se requiera). Cada dispositivo conectado al bus I2C y cada uno tiene su direcci\u00f3n exclusiva, de 7 bits, (Asi que, en teor\u00eda, podemos conectar 27 = 128, dispositivos). Uno de estos componentes, debe actuar como master, es decir controla el reloj. No se requiere una velocidad de reloj estricta, ya que es el master quien controla el Clock. Es multi master, el master puede cambiar, pero solo uno puede estar activo a la vez, y proporciona un protocolo de arbitraje y detecci\u00f3n de colisiones. (Si no has entendido esto, no te preocupes, todav\u00eda es pronto). Puedes encontrar que a este bus se le llama I2C, IIC o I2C, y tambi\u00e9n, como TWI (Two Wire Interface, o interface de 2 hilos), pero siempre es lo mismo. La idea es que todos los componentes se conecten en paralelo a las dos l\u00edneas del bus, SDA y SCL. En cada momento solo puede haber un master, en este caso, nuestro Arduino, y los dem\u00e1s se configuran como esclavos. Puede haber m\u00e1s de un master. La norma propone un sistema de arbitraje, para transferir el control de uno a otro, pero en un instante dado, solo uno puede ser el master. Atenci\u00f3n a las resistencias de Pullup conectadas a SDA y SCL. Son imperativas, ya que el bus es activo bajo (Esto es, la se\u00f1al activa es un 0, no un 1. Pero tranquilo, que esto no te afecta) Al conectar algo al bus I2C, es imprescindible que leas el manual para saber si los pullups los tienes que poner t\u00fa, o vienen puestos en el componente. En el caso del montaje entregado, ya existe una doble pull-up de 10 KOhm (y por lo tanto, resultante en 5K, por lo que en principio se deber\u00eda admitir hasta 400 kHz en el bus). Y la buena noticia es que nuestro Arduino lo soporta de f\u00e1brica con una librer\u00eda est\u00e1ndar, que utiliza dos de los pines anal\u00f3gicos para las funciones SDA (Datos) y SCL (Clock). En el Arduino UNO , los pines I2C est\u00e1n en los pines anal\u00f3gicos A4 (SDA) y A5 (SCL) En el Arduino Mega y DUE, son el 20 (SDA) y en el 21(SCL) En el WeMos D1 Mini entregado, son el 0 (SDA) y en el 2(SCL) La librer\u00eda I2C, en Arduino se llama Wire, y gestiona el protocolo de comunicaciones completo, lo que es un detalle, pues nos ahorra la parte de estudiar el protocolo y escribir programas para ello (maquina de estados a bajo nivel). Esto es una practica habitual y recomendada, construir sobre el trabajo de terceros. Es una de las muy grandes virtudes de la comunidad Arduino y open source. Hay una gama muy amplia de librerias que dan soporte a muchisimos dispositivos, o crean funcionalidades nuevas, \u2026 Se recomienda buscar, probar y sacar conclusiones para ver tanto la calidad como el posible uso. Se espera que tras este ejercicio se consiga comunicar con el sensor BME280 integrado en el montaje entregado.","title":"Pr\u00e1ctica 2 - El bus I2C"},{"location":"arduino/practica-02/#programa","text":"Se parte de la anterior sesi\u00f3n, donde un programa enviaba por puerto serie 3 variables, para luego verlas o dibujarlas mediante el monitor serie o el plotter, respectivamente. NOTA : La documentaci\u00f3n oficial de la libreria Wire de Arduino puede encontrarse en https://www.arduino.cc/en/reference/wire NOTA : Toda la informaci\u00f3n de las librerias del ESP8266 para Ardu\u00edno pueden encontrarse en https://arduino-esp8266.readthedocs.io/en/latest/libraries.html NOTA : Toda la informaci\u00f3n referente al sensor BME280 que trataremos puede encontrarse en su datasheet en BME280.pdf Para poder comenzar con el uso de las funciones de I2C es necesario incluir la cabecera de la libreria Wire , al principio de nuestro programa, de la siguiente forma: #include <Wire.h> void setup() { // join i2c bus (address optional for master) Wire.begin(0, 2); // start serial for output Serial.begin(9600); } void loop() { // request 6 bytes from slave device #8 Wire.requestFrom(8, 6); // slave may send less than requested while (Wire.available()) { // receive a byte as character char c = Wire.read(); // print the character Serial.printf(\"Received: %02X\\n\", c); } delay(500); }","title":"Programa"},{"location":"arduino/practica-03/","text":"Pr\u00e1ctica 3 TBD","title":"Pr\u00e1ctica 3"},{"location":"arduino/practica-03/#practica-3","text":"TBD","title":"Pr\u00e1ctica 3"},{"location":"arduino/practica-04/","text":"Pr\u00e1ctica 4 TBD","title":"Pr\u00e1ctica 4"},{"location":"arduino/practica-04/#practica-4","text":"TBD","title":"Pr\u00e1ctica 4"},{"location":"hardware/","text":"Hardware Tras analizar la oferta actual de placas de desarrollo soportados por Arduino, en base a su conectividad, tama\u00f1o y peso, se opt\u00f3 por la placa D1 Mini de WeMos , basada en un chip ESP8266 . En l\u00edneas generales esta placa ofrece un equilibrio entre tama\u00f1o y peso frente a conectividad y posibilidades, ya que aparte de integrar un chipset Wi-Fi, es posible programarla sin ning\u00fan dispositivo extra y gracias a su arquitectura interna, pr\u00e1cticamente todos los GPIOs son reprogramables, pudiendose intercambiar las funcionalidades de Serie, I2C, SPI, \u2026 Microcontrolador ESP8266 Descargar hoja de datos completa ESP8266EX Se indican a continuaci\u00f3n las caracteristicas generales del micro: Wi-Fi Items Parameters Certification Wi-Fi Alliance Protocols 802.11 b/g/n (HT20) Frequency Range 2.4G ~ 2.5G (2400M ~ 2483.5M) TX Power 802.11 b: +20 dBm 802.11 g: +17 dBm 802.11 n: +14 dBm Rx Sensitivity 802.11 b: \u201391 dbm (11 Mbps) 802.11 g: \u201375 dbm (54 Mbps) 802.11 n: \u201372 dbm (MCS7) Antenna PCB Trace, External, IPEX Connector, Ceramic Chip Hardware Items Parameters CPU Tensilica L106 32-bit processor Peripheral Interface UART/SDIO/SPI/I2C/I2S/IR Remote Control GPIO/ADC/PWM/LED Light & Button Operating Voltage 2.5V ~ 3.6V Operating Current Average value: 80 mA Operating Temperature Range \u201340\u00b0C ~ 125\u00b0C Package Size QFN32-pin (5 mm x 5 mm) External Interface - Software Items Parameters Wi-Fi Mode Station/SoftAP/SoftAP+Station Security WPA/WPA2 Encryption WEP/TKIP/AES Firmware Upgrade UART Download / OTA (via network) Software Development Supports Cloud Server Development / Firmware and SDK Network Protocols IPv4, TCP/UDP/HTTP User Configuration AT Instruction Set, Cloud Server, Android/iOS App Placa base: WeMos D1 Mini Descargar esquem\u00e1tico D1 Mini Pagina oficial de la placa D1 Mini D\u00f3nde comprar Item Cantidad Precio Precio Ud. Ancho (mm) Alto (mm) Grosor (mm) Peso (g) Link Amazon D1 Mini 5 22.99 4.6 25.6 34.2 10 3 Link D1 Mini 3 14.99 5 25.6 34.2 10 3 Link Sensor BME280: Temperatura, humedad y presion Descargar hoja de datos completa BME280 D\u00f3nde comprar Item Cantidad Precio Precio Ud. Pinout compatible D1 Mini Ancho (mm) Alto (mm) Grosor (mm) Peso (g) Link Amazon Modulo BME280 5 26.12 5.23 (+0.53/-0.67) No, linea unica 10 12 5 1 Link Modulo BME280 5 26.99 5.4 (+0.7/-0.5) No, linea unica 10 12 5 1 Link Sensor MPU6050: Giroscopo de 3 ejes y aceler\u00f3metro de 3 ejes Descargar hoja de datos parcial MPU6050 Descargar mapa de registros MPU6050 D\u00f3nde comprar Item Cantidad Precio Precio Ud. Pinout compatible D1 Mini Ancho (mm) Alto (mm) Grosor (mm) Peso (g) Link Amazon Modulo MPU-6050 6 14.29 2.4 No, linea unica 20 16 5 1 Link Modulo MPU-6050 10 31.99 3.2 No, linea unica 20 16 5 1 Link Modulo MPU-6050 3 13.31 4.43 No, linea unica 20 16 5 1 Link Modulo MPU-6050 3 13.37 4.46 No, linea unica 20 16 5 1 Link","title":"Hardware"},{"location":"hardware/#hardware","text":"Tras analizar la oferta actual de placas de desarrollo soportados por Arduino, en base a su conectividad, tama\u00f1o y peso, se opt\u00f3 por la placa D1 Mini de WeMos , basada en un chip ESP8266 . En l\u00edneas generales esta placa ofrece un equilibrio entre tama\u00f1o y peso frente a conectividad y posibilidades, ya que aparte de integrar un chipset Wi-Fi, es posible programarla sin ning\u00fan dispositivo extra y gracias a su arquitectura interna, pr\u00e1cticamente todos los GPIOs son reprogramables, pudiendose intercambiar las funcionalidades de Serie, I2C, SPI, \u2026","title":"Hardware"},{"location":"hardware/#microcontrolador-esp8266","text":"Descargar hoja de datos completa ESP8266EX Se indican a continuaci\u00f3n las caracteristicas generales del micro:","title":"Microcontrolador ESP8266"},{"location":"hardware/#wi-fi","text":"Items Parameters Certification Wi-Fi Alliance Protocols 802.11 b/g/n (HT20) Frequency Range 2.4G ~ 2.5G (2400M ~ 2483.5M) TX Power 802.11 b: +20 dBm 802.11 g: +17 dBm 802.11 n: +14 dBm Rx Sensitivity 802.11 b: \u201391 dbm (11 Mbps) 802.11 g: \u201375 dbm (54 Mbps) 802.11 n: \u201372 dbm (MCS7) Antenna PCB Trace, External, IPEX Connector, Ceramic Chip","title":"Wi-Fi"},{"location":"hardware/#hardware_1","text":"Items Parameters CPU Tensilica L106 32-bit processor Peripheral Interface UART/SDIO/SPI/I2C/I2S/IR Remote Control GPIO/ADC/PWM/LED Light & Button Operating Voltage 2.5V ~ 3.6V Operating Current Average value: 80 mA Operating Temperature Range \u201340\u00b0C ~ 125\u00b0C Package Size QFN32-pin (5 mm x 5 mm) External Interface -","title":"Hardware"},{"location":"hardware/#software","text":"Items Parameters Wi-Fi Mode Station/SoftAP/SoftAP+Station Security WPA/WPA2 Encryption WEP/TKIP/AES Firmware Upgrade UART Download / OTA (via network) Software Development Supports Cloud Server Development / Firmware and SDK Network Protocols IPv4, TCP/UDP/HTTP User Configuration AT Instruction Set, Cloud Server, Android/iOS App","title":"Software"},{"location":"hardware/#placa-base-wemos-d1-mini","text":"Descargar esquem\u00e1tico D1 Mini Pagina oficial de la placa D1 Mini","title":"Placa base: WeMos D1 Mini"},{"location":"hardware/#donde-comprar","text":"Item Cantidad Precio Precio Ud. Ancho (mm) Alto (mm) Grosor (mm) Peso (g) Link Amazon D1 Mini 5 22.99 4.6 25.6 34.2 10 3 Link D1 Mini 3 14.99 5 25.6 34.2 10 3 Link","title":"D\u00f3nde comprar"},{"location":"hardware/#sensor-bme280-temperatura-humedad-y-presion","text":"Descargar hoja de datos completa BME280","title":"Sensor BME280: Temperatura, humedad y presion"},{"location":"hardware/#donde-comprar_1","text":"Item Cantidad Precio Precio Ud. Pinout compatible D1 Mini Ancho (mm) Alto (mm) Grosor (mm) Peso (g) Link Amazon Modulo BME280 5 26.12 5.23 (+0.53/-0.67) No, linea unica 10 12 5 1 Link Modulo BME280 5 26.99 5.4 (+0.7/-0.5) No, linea unica 10 12 5 1 Link","title":"D\u00f3nde comprar"},{"location":"hardware/#sensor-mpu6050-giroscopo-de-3-ejes-y-acelerometro-de-3-ejes","text":"Descargar hoja de datos parcial MPU6050 Descargar mapa de registros MPU6050","title":"Sensor MPU6050: Giroscopo de 3 ejes y aceler\u00f3metro de 3 ejes"},{"location":"hardware/#donde-comprar_2","text":"Item Cantidad Precio Precio Ud. Pinout compatible D1 Mini Ancho (mm) Alto (mm) Grosor (mm) Peso (g) Link Amazon Modulo MPU-6050 6 14.29 2.4 No, linea unica 20 16 5 1 Link Modulo MPU-6050 10 31.99 3.2 No, linea unica 20 16 5 1 Link Modulo MPU-6050 3 13.31 4.43 No, linea unica 20 16 5 1 Link Modulo MPU-6050 3 13.37 4.46 No, linea unica 20 16 5 1 Link","title":"D\u00f3nde comprar"},{"location":"introduccion/","text":"Introducci\u00f3n Presentaci\u00f3n de las aplicaciones y herramientas que ser\u00e1n necesarias a lo largo del taller, asi como de los objetivos esperados","title":"Introducci\u00f3n"},{"location":"introduccion/#introduccion","text":"Presentaci\u00f3n de las aplicaciones y herramientas que ser\u00e1n necesarias a lo largo del taller, asi como de los objetivos esperados","title":"Introducci\u00f3n"},{"location":"lenguaje-c/","text":"Lenguaje C Estandar de C: C99 Hay varios estandares que se pueden seguir para programar en C/C++, pero es muy aconsejable ce\u00f1irse a C99 mientras sea posible, ya que asegurar\u00e1 una compatibilidad enorme entre diferentes sistemas. :page_facing_up: ISO-IEC-9899_C99-Standard.pdf Tutorial de C/C++ de tenouk.com Fuente : Link a la pagina de descarga de donde se han sacado estos PDF Se incluyen los siguientes ficheros para facilitar la disponibilidad de estos en cada puesto de trabajo. El usuario solo tendra que utilizar git y descargar la rama para poder acceder a este contenido. Igualmente se enlazan desde aqui para facilitar la navegacion web: :page_facing_up: Module 1. C / C++ Introduction. Intro and history, building and running the first C/C++ program :page_facing_up: Module 2. C / C++ Basic Data Types [1/2/3]. The basic C & C++ data types story and program examples :page_facing_up: Module 3. C / C++ Statements, Expressions & Operators [1/2/3]. Statements, expressions and operators used in C & C++ story and program examples :page_facing_up: Module 4. C / C++ Functions [1/2/3/4]. Functions story and program examples :page_facing_up: Module 5. C Formatted I/O [1/2]. The printf() and scanf() story and program examples :page_facing_up: Module 6. C / C++ Program Controls [1/2]. Loops, if-else, while, do-while, for, switch-case-break etc. story and program examples :page_facing_up: Module 7. C / C++ Arrays [1/2]. Array or aggregated data type, story and program examples :page_facing_up: Module 8. C / C++ Pointers [1/2/3]. Pointers, another very important data type, story and program examples :page_facing_up: Module 9. C File I/O [1/2/3]. Standard file input/output, creating, reading and writing files, story and program examples :page_facing_up: Module 10. C / C++ Preprocessor Directives. Preprocessor directives used in C/C++, #include, macros, inline functions etc :page_facing_up: Module 11. C / C++ Type Specifiers. struct, typedef, union & enum - Various C/C++ aggregated data types and typedef :page_facing_up: Module W. Assembler, Compiler & Linker. Quite a complete story how C assembled, compiled, linked and run :page_facing_up: Module X. C\u2019s Character and String Manipulation. Using standard C predefined functions in manipulating characters and strings, full of working program examples :page_facing_up: Module Y. main() and Command Line Arguments. A complete story of the main() function :page_facing_up: Module Z. C Storage and Memory Allocation. Predefined functions used in memory allocation and de-allocation in C","title":"C"},{"location":"lenguaje-c/#lenguaje-c","text":"","title":"Lenguaje C"},{"location":"lenguaje-c/#estandar-de-c-c99","text":"Hay varios estandares que se pueden seguir para programar en C/C++, pero es muy aconsejable ce\u00f1irse a C99 mientras sea posible, ya que asegurar\u00e1 una compatibilidad enorme entre diferentes sistemas. :page_facing_up: ISO-IEC-9899_C99-Standard.pdf","title":"Estandar de C: C99"},{"location":"lenguaje-c/#tutorial-de-cc-de-tenoukcom","text":"Fuente : Link a la pagina de descarga de donde se han sacado estos PDF Se incluyen los siguientes ficheros para facilitar la disponibilidad de estos en cada puesto de trabajo. El usuario solo tendra que utilizar git y descargar la rama para poder acceder a este contenido. Igualmente se enlazan desde aqui para facilitar la navegacion web: :page_facing_up: Module 1. C / C++ Introduction. Intro and history, building and running the first C/C++ program :page_facing_up: Module 2. C / C++ Basic Data Types [1/2/3]. The basic C & C++ data types story and program examples :page_facing_up: Module 3. C / C++ Statements, Expressions & Operators [1/2/3]. Statements, expressions and operators used in C & C++ story and program examples :page_facing_up: Module 4. C / C++ Functions [1/2/3/4]. Functions story and program examples :page_facing_up: Module 5. C Formatted I/O [1/2]. The printf() and scanf() story and program examples :page_facing_up: Module 6. C / C++ Program Controls [1/2]. Loops, if-else, while, do-while, for, switch-case-break etc. story and program examples :page_facing_up: Module 7. C / C++ Arrays [1/2]. Array or aggregated data type, story and program examples :page_facing_up: Module 8. C / C++ Pointers [1/2/3]. Pointers, another very important data type, story and program examples :page_facing_up: Module 9. C File I/O [1/2/3]. Standard file input/output, creating, reading and writing files, story and program examples :page_facing_up: Module 10. C / C++ Preprocessor Directives. Preprocessor directives used in C/C++, #include, macros, inline functions etc :page_facing_up: Module 11. C / C++ Type Specifiers. struct, typedef, union & enum - Various C/C++ aggregated data types and typedef :page_facing_up: Module W. Assembler, Compiler & Linker. Quite a complete story how C assembled, compiled, linked and run :page_facing_up: Module X. C\u2019s Character and String Manipulation. Using standard C predefined functions in manipulating characters and strings, full of working program examples :page_facing_up: Module Y. main() and Command Line Arguments. A complete story of the main() function :page_facing_up: Module Z. C Storage and Memory Allocation. Predefined functions used in memory allocation and de-allocation in C","title":"Tutorial de C/C++ de tenouk.com"},{"location":"otros-recursos/","text":"Otros recursos Este apartado contiene informaci\u00f3n adicional que ha sido necesaria o est\u00e1 relacionada con el taller. Los alumnos no necesitan estudiar esta parte, ni tampoco se expondr\u00e1 en clases, pero queda a disposici\u00f3n por si surgen dudas o por pura curiosidad y aprendizaje. Servidor de apoyo Se ha levantado un servidor con SO Debian 9, accesible a traves de iot.tesla.studio , para que sirva como apoyo en todo lo que a presencia online se refiera. Roadmap: MQTT Broker - Informaci\u00f3n t\u00e9cnica de la instalaci\u00f3n del broker MQTT Dashboard (TBD) - Informaci\u00f3n t\u00e9cnica de la presentaci\u00f3n via web de los datos recogidos por MQTT","title":"Otros recursos"},{"location":"otros-recursos/#otros-recursos","text":"Este apartado contiene informaci\u00f3n adicional que ha sido necesaria o est\u00e1 relacionada con el taller. Los alumnos no necesitan estudiar esta parte, ni tampoco se expondr\u00e1 en clases, pero queda a disposici\u00f3n por si surgen dudas o por pura curiosidad y aprendizaje.","title":"Otros recursos"},{"location":"otros-recursos/#servidor-de-apoyo","text":"Se ha levantado un servidor con SO Debian 9, accesible a traves de iot.tesla.studio , para que sirva como apoyo en todo lo que a presencia online se refiera. Roadmap: MQTT Broker - Informaci\u00f3n t\u00e9cnica de la instalaci\u00f3n del broker MQTT Dashboard (TBD) - Informaci\u00f3n t\u00e9cnica de la presentaci\u00f3n via web de los datos recogidos por MQTT","title":"Servidor de apoyo"},{"location":"otros-recursos/mqtt-broker/","text":"MQTT Broker A MQTT Broker is configured for Euroavia C/Arduino workshop. The provided ESP8266-based boards will be able to publish generic and sensor data to this server. Address: iot.tesla.studio MQTT port: 1883 WebSocket port: 1884 MQTT URI: mqtt://iot.tesla.studio:1883 WebSockeet URI: ws://iot.tesla.studio:1884 Available topics and privacy for this devices: Topic path Description euroavia-pool/# Subscribe access to any device (public pool) euroavia-pool/USERNAME/# Subscribe/Publish access to a specific path (public pool) euroavia-devices/USERNAME/# Subscribe/Publish access (private zone) Install both broker and clients root@iot:~# apt-get install mosquitto mosquitto-clients root@iot:~# service mosquitto status If OK will look like this: \u25cf mosquitto.service - LSB: mosquitto MQTT v3.1 message broker Loaded: loaded (/etc/init.d/mosquitto; generated; vendor preset: enabled) Active: active (running) since Fri 2019-03-29 00:52:35 CET; 7s ago Docs: man:systemd-sysv-generator(8) CGroup: /system.slice/mosquitto.service \u2514\u25004806 /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf Mar 29 00:52:35 iot systemd[1]: Starting LSB: mosquitto MQTT v3.1 message broker... Mar 29 00:52:35 iot mosquitto[4801]: Starting network daemon:: mosquitto. Mar 29 00:52:35 iot systemd[1]: Started LSB: mosquitto MQTT v3.1 message broker. Configure protocols Enable both MQTT and WebSockets protocols root@iot:~# cat /etc/mosquitto/conf.d/protocols.conf listener 1883 protocol mqtt listener 1884 protocol websockets Restart the server and check status root@iot:~# service mosquitto restart root@iot:~# service mosquitto status Configure storage and persistence This allows the broker to keep the data even between restarts root@iot:~# cat /etc/mosquitto/conf.d/storage.conf persistence true persistence_location /var/lib/mosquitto/ persistence_file mosquitto.db Restart the server and check status root@iot:~# service mosquitto restart root@iot:~# service mosquitto status Configure password file and users Add first (-c), then in batch (-b). Use (-D) for user deletion root@iot:~# mosquitto_passwd -c /etc/mosquitto/passwd web_client root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0001 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0002 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0003 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0004 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0005 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0006 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0007 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0008 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0000 PASSHERE Configure access control list (ACL) Create rules for clients with and without username root@iot:~# cat /etc/mosquitto/aclfile # # Clients without username # # This affects access control for clients with no username. topic read $SYS/# # # Clients with username # ## Main users: admin and web_client user admin topic readwrite # user web_client topic read # ## Other users: TC-Euroavia pattern readwrite euroavia-pool/%u/# pattern read euroavia-pool/# pattern readwrite euroavia-devices/%u/# Configure clients access Enable both password and ACL root@iot:~# cat /etc/mosquitto/conf.d/access.conf allow_anonymous false password_file /etc/mosquitto/passwd acl_file /etc/mosquitto/aclfile Restart the server and check status root@iot:~# service mosquitto restart root@iot:~# service mosquitto status","title":"MQTT Broker"},{"location":"otros-recursos/mqtt-broker/#mqtt-broker","text":"A MQTT Broker is configured for Euroavia C/Arduino workshop. The provided ESP8266-based boards will be able to publish generic and sensor data to this server. Address: iot.tesla.studio MQTT port: 1883 WebSocket port: 1884 MQTT URI: mqtt://iot.tesla.studio:1883 WebSockeet URI: ws://iot.tesla.studio:1884 Available topics and privacy for this devices: Topic path Description euroavia-pool/# Subscribe access to any device (public pool) euroavia-pool/USERNAME/# Subscribe/Publish access to a specific path (public pool) euroavia-devices/USERNAME/# Subscribe/Publish access (private zone)","title":"MQTT Broker"},{"location":"otros-recursos/mqtt-broker/#install-both-broker-and-clients","text":"root@iot:~# apt-get install mosquitto mosquitto-clients root@iot:~# service mosquitto status If OK will look like this: \u25cf mosquitto.service - LSB: mosquitto MQTT v3.1 message broker Loaded: loaded (/etc/init.d/mosquitto; generated; vendor preset: enabled) Active: active (running) since Fri 2019-03-29 00:52:35 CET; 7s ago Docs: man:systemd-sysv-generator(8) CGroup: /system.slice/mosquitto.service \u2514\u25004806 /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf Mar 29 00:52:35 iot systemd[1]: Starting LSB: mosquitto MQTT v3.1 message broker... Mar 29 00:52:35 iot mosquitto[4801]: Starting network daemon:: mosquitto. Mar 29 00:52:35 iot systemd[1]: Started LSB: mosquitto MQTT v3.1 message broker.","title":"Install both broker and clients"},{"location":"otros-recursos/mqtt-broker/#configure-protocols","text":"Enable both MQTT and WebSockets protocols root@iot:~# cat /etc/mosquitto/conf.d/protocols.conf listener 1883 protocol mqtt listener 1884 protocol websockets Restart the server and check status root@iot:~# service mosquitto restart root@iot:~# service mosquitto status","title":"Configure protocols"},{"location":"otros-recursos/mqtt-broker/#configure-storage-and-persistence","text":"This allows the broker to keep the data even between restarts root@iot:~# cat /etc/mosquitto/conf.d/storage.conf persistence true persistence_location /var/lib/mosquitto/ persistence_file mosquitto.db Restart the server and check status root@iot:~# service mosquitto restart root@iot:~# service mosquitto status","title":"Configure storage and persistence"},{"location":"otros-recursos/mqtt-broker/#configure-password-file-and-users","text":"Add first (-c), then in batch (-b). Use (-D) for user deletion root@iot:~# mosquitto_passwd -c /etc/mosquitto/passwd web_client root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0001 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0002 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0003 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0004 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0005 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0006 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0007 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0008 PASSHERE root@iot:~# mosquitto_passwd -b /etc/mosquitto/passwd tc_d1_0000 PASSHERE","title":"Configure password file and users"},{"location":"otros-recursos/mqtt-broker/#configure-access-control-list-acl","text":"Create rules for clients with and without username root@iot:~# cat /etc/mosquitto/aclfile # # Clients without username # # This affects access control for clients with no username. topic read $SYS/# # # Clients with username # ## Main users: admin and web_client user admin topic readwrite # user web_client topic read # ## Other users: TC-Euroavia pattern readwrite euroavia-pool/%u/# pattern read euroavia-pool/# pattern readwrite euroavia-devices/%u/#","title":"Configure access control list (ACL)"},{"location":"otros-recursos/mqtt-broker/#configure-clients-access","text":"Enable both password and ACL root@iot:~# cat /etc/mosquitto/conf.d/access.conf allow_anonymous false password_file /etc/mosquitto/passwd acl_file /etc/mosquitto/aclfile Restart the server and check status root@iot:~# service mosquitto restart root@iot:~# service mosquitto status","title":"Configure clients access"}]}